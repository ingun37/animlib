// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Description:
//      This script is run automatically when the MayaBullet plug-in is 
//      loaded during an interactive Maya session.
//

python "import maya.app.mayabullet as mayabullet";
python "import maya.app.mayabullet.BulletUtils as BulletUtils";
python "import maya.app.mayabullet.RigidBody as RigidBody";
python "import maya.app.mayabullet.RigidBodyConstraint as RigidBodyConstraint";
python "import maya.app.mayabullet.SoftBody as SoftBody";
python "import maya.app.mayabullet.SoftBodyConstraint as SoftBodyConstraint";
python "import maya.app.mayabullet.Ragdoll as Ragdoll";
python "import maya.app.mayabullet.MayaUtils as MayaUtils";

// ============================
// MENUS
// ============================

proc addBulletMenus()
{
    global string $gMainWindow;

    string $bulletMainMenu       = "bullet_MainMenu";
    string $softRigidBodyMenu    = "bullet_SoftRigidBodyMenu";  
    string $constraintMenu       = "bullet_ConstraintsMenu";
    string $setVertexPropsMenu   = "bullet_SetVertexPropertiesMenu";    
    string $paintVertexPropsMenu = "bullet_PaintVertexPropertiesMenu";  

    // main menu
    setParent $gMainWindow;
    menu -label (uiRes("m_bulletInitUI.kBulletMenuTitle")) -to true -familyImage "menuIconBullet.png" $bulletMainMenu;

    // submenu
    menuItem -label (uiRes("m_bulletInitUI.kCreateActiveRB"))
        -annotation (uiRes("m_bulletInitUI.kCreateActiveRBAnnot"))
        -command ( "python \"RigidBody.CreateRigidBody(True).executeCommandCB()\"" )
        -image "bullet_rigidActive.png"
        bullet_CreateActiveRigidBodyItem;
    menuItem -optionBox true -image "bullet_rigidActive.png"
            -annotation (uiRes("m_bulletInitUI.kCreateActiveRBOpt")) 
            -command ( "python \"RigidBody.CreateRigidBody(True).createOptionDialog()\"" )
            bullet_CreateActiveRigidBodyItemOB;

    menuItem -label (uiRes("m_bulletInitUI.kCreatePassiveRB"))
        -annotation (uiRes("m_bulletInitUI.kCreatePassiveRBAnnot"))
        -command ( "python \"RigidBody.CreateRigidBody(False).executeCommandCB()\"" )
        -image "bullet_rigidPassive.png"
        bullet_CreatePassiveRigidBodyItem;
    menuItem -optionBox true -image "bullet_rigidPassive.png"
            -annotation (uiRes("m_bulletInitUI.kCreatePassiveRBOpt")) 
            -command ( "python \"RigidBody.CreateRigidBody(False).createOptionDialog()\"" )
            bullet_CreatePassiveRigidBodyItemOB;

    menuItem -label (uiRes("m_bulletInitUI.kCreateSB"))
        -annotation (uiRes("m_bulletInitUI.kCreateSBAnnot"))
        -command ( "python \"SoftBody.CreateSoftBody().executeCommandCB()\"" )
        -image "bullet_soft.png"
        bullet_CreateSoftBodyItem;
    menuItem -optionBox true -image "bullet_soft.png"
            -annotation (uiRes("m_bulletInitUI.kCreateSBOpt"))
            -command ( "python \"SoftBody.CreateSoftBody().createOptionDialog()\"" )
            bullet_CreateSoftBodyDialogItem;

    // submenu
    menuItem -divider 1;
    menuItem -label (uiRes("m_bulletInitUI.kCreateRBConstraint"))
        -annotation (uiRes("m_bulletInitUI.kCreateRBConstraintAnnot"))
        -command ( "python \"RigidBodyConstraint.CreateRigidBodyConstraint().executeCommandCB()\"" )
        -image "bullet_rigidConstraint.png"
        bullet_CreateRigidBodyConstraintItem;
    menuItem -optionBox true -image "bullet_rigidConstraint.png"
            -annotation (uiRes("m_bulletInitUI.kCreateRBConstraintOpt"))
            -command ( "python \"RigidBodyConstraint.CreateRigidBodyConstraint().createOptionDialog()\"" )
            bullet_CreateRigidBodyConstraintItemOB;

    menuItem -label (uiRes("m_bulletInitUI.kCreateSBAnchor"))
        -annotation (uiRes("m_bulletInitUI.kCreateAnchorAnnot"))
        -command ( "python \"SoftBodyConstraint.createSoftBodyAnchorConstraint()\"" )
        -image "bullet_createSoftBodyAnchor.png"
        bullet_CreateSoftAnchorConstraintItem;  

    menuItem -divider 1;

    // submenu
    menuItem -subMenu true -label (uiRes("m_bulletInitUI.kSetSBProps")) -to true -familyImage "nClothPaintMap.png" $setVertexPropsMenu;
    menuItem -label (uiRes("m_bulletInitUI.kSetMassProp")) 
        -annotation (uiRes("m_bulletInitUI.kSetMassPropAnnot"))
        -image "bullet_setPerParticleSoftBodyMass.png"
        -command ( "python \"SoftBody.setSoftBodyPerParticleMass()\"" )        
        bullet_SetVertexProperty_MassItem;
    menuItem -label (uiRes("m_bulletInitUI.kSetLinearStiffnessProp")) 
        -annotation (uiRes("m_bulletInitUI.kSetLinearStiffnessPropAnnot"))
        -image "bullet_setPerParticleSoftBodyLinearStiffness.png"
        -command ( "python \"SoftBody.setSoftBodyPerParticleLinearStiffness()\"" )        
        bullet_SetVertexProperty_LinearStiffnessItem;
    menuItem -label (uiRes("m_bulletInitUI.kSetBendResistanceProp")) 
        -annotation (uiRes("m_bulletInitUI.kSetBendResistancePropAnnot"))
        -image "bullet_setPerParticleSoftBodyBendResistance.png"
        -command ( "python \"SoftBody.setSoftBodyPerParticleBendResistance()\"" )        
        bullet_SetVertexProperty_BendResistanceItem;
    setParent -m ..;

    // submenu
    menuItem -subMenu true -label (uiRes("m_bulletInitUI.kPaintSBProps")) -to true -familyImage "nClothPaintMap.png" $paintVertexPropsMenu;
    menuItem -label (uiRes("m_bulletInitUI.kPaintMassProp")) 
        -annotation (uiRes("m_bulletInitUI.kPaintMassPropAnnot"))
        -image "bullet_paintPerParticleSoftBodyMass.png"
        -command ( "python \"SoftBody.paintSoftBodyVertexProperty('particleMass')\"" )        
        bullet_PaintVertexProperty_MassItem;
    menuItem -label (uiRes("m_bulletInitUI.kPaintLinearStiffnessProp")) 
        -annotation (uiRes("m_bulletInitUI.kPaintLinearStiffnessPropAnnot"))
        -image "bullet_paintPerParticleSoftBodyLinearStiffness.png"
        -command ( "python \"SoftBody.paintSoftBodyVertexProperty('particleLinearStiffness')\"" )        
        bullet_PaintVertexProperty_LinearStiffnessItem;
    menuItem -label (uiRes("m_bulletInitUI.kPaintBendResistanceProp")) 
        -annotation (uiRes("m_bulletInitUI.kPaintBendResistancePropAnnot"))
        -image "bullet_paintPerParticleSoftBodyBendResistance.png"
        -command ( "python \"SoftBody.paintSoftBodyVertexProperty('particleBendResistance')\"" )        
        bullet_PaintVertexProperty_BendResistanceItem;
    setParent -m ..;

    // Ragdoll items...
    menuItem -divider 1;    
    menuItem -label (uiRes("m_bulletInitUI.kAddCollider"))  
        -annotation (uiRes("m_bulletInitUI.kAddColliderAnnot"))
        -command "python \"Ragdoll.AddColliders().executeCommandCB()\""
        -image "bullet_createColliders.png"
        bullet_AddCollidersToSkeletonItem;  
    menuItem -optionBox true -image "bullet_createColliders.png"
            -annotation (uiRes("m_bulletInitUI.kAddColliderOpt")) 
            -command ( "python \"Ragdoll.AddColliders().createOptionDialog()\"" )
            bullet_AddCollidersItemOB;

    menuItem -label (uiRes("m_bulletInitUI.kCreateRagdoll"))  
        -annotation (uiRes("m_bulletInitUI.kCreateRagdollAnnot"))
        -command "python \"Ragdoll.CreateRagdoll().executeCommandCB()\""
        -image "bullet_createRagdoll.png"
        bullet_CreateRagdollFromSkeletonItem;   
    menuItem -optionBox true -image "bullet_createRagdoll.png"
            -annotation (uiRes("m_bulletInitUI.kCreateRagdollOpt")) 
            -command ( "python \"Ragdoll.CreateRagdoll().createOptionDialog()\"" )
            bullet_CreateRagdollItemOB;

    menuItem -divider 1;

    // main menu
    menuItem -label (uiRes("m_bulletInitUI.kSelectSolver")) 
        -annotation (uiRes("m_bulletInitUI.kSelectSolverAnnot"))
        -image "bullet_selectSolverNode.png"
        -command ( "select -r `ls -type bulletSolverShape`" )
        bullet_SelectSolverItem;

    menuItem -label (uiRes("m_bulletInitUI.kInteractivePlayback")) 
        -annotation (uiRes("m_bulletInitUI.kInteractivePlaybackAnnot"))
        -image "bullet_interactivePlayback.png"
        -command "InteractivePlayback"
        bullet_InteractivePlaybackItem;

    menuItem -label (uiRes("m_bulletInitUI.kDeleteBulletSystem")) 
        -annotation (uiRes("m_bulletInitUI.kDeleteBulletSystemAnnot"))
        -command ( "bullet_DeleteEntireSystem" )
        bullet_DeleteSystemItem;

    menuItem -label (uiRes("m_bulletInitUI.kBulletHelp")) 
        -annotation (uiRes("m_bulletInitUI.kBulletHelpAnnot"))
        -command "launch -web \"http://www.autodesk.com/mayabullet-docs\""
        bullet_BulletHelpItem;

    setParent -m ..; // for main menu
}


proc removeBulletMenus()
{
    // Delete menu if it exists
    if (`menu -ex bullet_MainMenu`) {
        deleteUI -menu bullet_MainMenu;
    }
}


// ============================
// SHELF
// ============================

proc addBulletShelf()
{
    global string $gShelfTopLevel;

    // Do not change this string without modifying shelfLabel.mel 
    //
    string $shelfName = "Bullet"; // consider making global var
    string $shelfButtonPrefix = "bullet_shelf_";

    // Make sure Bullet Shelf Exists, create if not
    string $st, $shelfTabs[] = `shelfTabLayout -q -childArray $gShelfTopLevel`;
    for ($st in $shelfTabs)
    {
        if ($st == $shelfName)
            return;
    }

    // The Bullet shelf has not been created yet.  Create it here.
    // Store current shelf, as calling addNewShelf will change it.
    int $currentShelfNum = `tabLayout -q -sti $gShelfTopLevel`;

    // Add the new shelf
    addNewShelfTab($shelfName);

    // Restore original current shelf
    tabLayout -e -sti $currentShelfNum $gShelfTopLevel;
    optionVar -iv selectedShelf $currentShelfNum;

    // Add Shelf Buttons

    // From Existing menus (if items exist)
    string $menuItems[] = {
         "bullet_CreateActiveRigidBodyItem"
        ,"bullet_CreatePassiveRigidBodyItem"
        ,"bullet_CreateSoftBodyItem"
        ,"bullet_CreateRigidBodyConstraintItem"
        ,"bullet_CreateSoftAnchorConstraintItem"
        ,"bullet_SetVertexProperty_MassItem"
        ,"bullet_PaintVertexProperty_MassItem"
        ,"bullet_AddCollidersToSkeletonItem"
        ,"bullet_CreateRagdollFromSkeletonItem"
        ,"bullet_SelectSolverItem"
        ,"bullet_InteractivePlaybackItem"
        //,""
        };
    string $menuItem;

    // Push/pop currentShelf to make sure menus are added to the right one
    string $currentShelf = `tabLayout -q -st $gShelfTopLevel`;
    tabLayout -e -st $shelfName $gShelfTopLevel;
    for ($menuItem in $menuItems) {
        menuItemToShelf $menuItem;
        // == rename shelfbutton to proper naming "bullet_shelf_*"
        string $tmpShelfButtons[] = `shelfLayout -q -childArray $shelfName`;
        if (!size($tmpShelfButtons))
            continue;

        string $shelfButton_old = $tmpShelfButtons[`size $tmpShelfButtons`-1];
        // copy last one
        shelfButton 
            -command            `shelfButton -q -command $shelfButton_old`
            -doubleClickCommand `shelfButton -q -doubleClickCommand $shelfButton_old`
            -image1             `shelfButton -q -image1 $shelfButton_old`
            -imageOverlayLabel  `shelfButton -q -imageOverlayLabel $shelfButton_old`
            -label              ((uiRes("m_bulletInitUI.kSolverProperties"))+`shelfButton -q -label $shelfButton_old`)
            -style              `shelfButton -q -style $shelfButton_old`
            -width              `shelfButton -q -width $shelfButton_old`
            -height             `shelfButton -q -height $shelfButton_old`
            -ann                `shelfButton -q -ann $shelfButton_old`
            ($shelfButtonPrefix+$shelfButton_old);
        deleteUI $shelfButton_old;
    }
    tabLayout -e -st $currentShelf $gShelfTopLevel;
}

// ===========================================================
// CreateUI/DeleteUI functions called by plugin on load/unload
// ===========================================================

// global used to store MEL path before override
global string $g_MayaBullet_CutCopyPastePath_Orig = "";


//---------------------------------------------------------------------------
// Given the raw result from the whatIs command, returns just the path
// to the MEL script. This is a MEL wrapper to call into Python to do
// a little string manipulation. 
//---------------------------------------------------------------------------
proc string rawScriptResultToPath (string $rawResult) {
    python("from maya.app.mayabullet import MayaUtils");
    string $tmp = ( "\"" + $rawResult + "\"" ); 
    return `python(("MayaUtils.rawScriptResultToPath(" + $tmp + ")"))`;
}

//---------------------------------------------------------------------------
// Given the node return siblings, parent argument is optional pass "" if
// you don't have it.
//---------------------------------------------------------------------------
proc string[] listSiblings(string $node, string $parent) {
    if (size($parent)==0)
        $parent = `listRelatives -parent $node`;
    string $siblings[] = `listRelatives -children $parent`;
    return `stringArrayRemove {$node} $siblings`;
}

//---------------------------------------------------------------------------
// Called on plug-in load.
//---------------------------------------------------------------------------
global proc bullet_CreateUI()
{
    // Make sure that the UI is deleted before creating it
    bullet_DeleteUI();

    // Create Bullet Menu
    addBulletMenus();
    addBulletShelf();

    // Register paint attributes
    makePaintable -attrType "doubleArray" "bulletSoftBodyShape" "particleMass";
    makePaintable -attrType "doubleArray" "bulletSoftBodyShape" "particleLinearStiffness";
    makePaintable -attrType "doubleArray" "bulletSoftBodyShape" "particleBendResistance";
    
    // override Cut-Copy-Paste with customized version (and save the original
    // to restore on unload
    global string $g_MayaBullet_CutCopyPastePath_Orig;
    string $rawResult = `whatIs cutCopyPaste.mel`;
    $g_MayaBullet_CutCopyPastePath_Orig = rawScriptResultToPath( $rawResult );
    //string $replacementScriptPath 
    //    = `python "MayaUtils.getScriptDir()"` + "others/cutCopyPaste.mel";
    eval( "source bulletCutCopyPaste.mel" );
}


//---------------------------------------------------------------------------
// Called on plug-in unload.
//---------------------------------------------------------------------------
global proc bullet_DeleteUI()
{
    removeBulletMenus();

    // restore the original MEL procs
    global string $g_MayaBullet_CutCopyPastePath_Orig;
    if ( size($g_MayaBullet_CutCopyPastePath_Orig) > 0 ) {
        eval( "source \"" + $g_MayaBullet_CutCopyPastePath_Orig + "\"" );
    }
}

//---------------------------------------------------------------------------
// Delete all Bullet solvers, rigid and soft bodies and their constraints.
//---------------------------------------------------------------------------
global proc bullet_DeleteEntireSystem ()
{
    string $toDelete[];

    // Remove the constraints first so that we don't have 
    // computes that fails because of missing inputs.
    string $bulletConstraints[] = `ls -type "bulletRigidBodyConstraintShape" -type "bulletSoftConstraintShape"`;
    for ($bulletConstraint in $bulletConstraints)
    {
        $parent = `listRelatives -p $bulletConstraint`;
        if (`size $parent`)
            $toDelete[(size($toDelete))] = stringArrayToString($parent, ",");
    }

    if (`size $toDelete`)
        delete $toDelete;

    // Remove the rigid bodies.
    $rigidShapes = `ls -type "bulletRigidBodyShape"`;
    if (`size $rigidShapes`)
    {
        $toDelete = {};

        string $rs;
        string $ragdollRoots[];

        for ($rs in $rigidShapes)
        {
            // If the rigid body is dynamic, remove the pairBlend node before the rigid
            // body gets deleted.  Otherwise the pairBlend will cause the rigid body's
            // transform to be reset.
            if (`getAttr ($rs + ".bodyType")` == 2)
            {
                string $pbs[] = `listConnections -type "pairBlend" $rs`;
                string $pairBlends[] = stringArrayRemoveDuplicates($pbs);
                if (`size $pairBlends`)
                {
                    string $pb;
                    for ($pb in $pairBlends)
                        delete $pb;
                }
            }

            // rigid body transform has no more children so it is safe 
            // to delete.
            string $parents[] = `listRelatives -parent $rs`;

            if (size(listSiblings($rs,$parents[0])) == 0)
            {
                $toDelete[(size($toDelete))] = $parents[0];
            }
            else
            {
                $toDelete[(size($toDelete))] = $rs;
            }

            // If grand-parent is a transform and it's name starts with 'Ragdoll'
            // NOTE: if the root was renamed then we don't delete because
            // we cannot differentiate between a locator created by the user
            // and one created by the bullet system.
            string $grandparents[] = `listRelatives -parent $parents`;

            if (`size($grandparents)` && `startsWith $grandparents[0] "Ragdoll"` )
            {
                $ragdollRoots[(size($ragdollRoots))] = $grandparents[0];
            }
            
        }
        
        if (size($toDelete))
            delete $toDelete;

        // check collected ragdoll roots, if they have no more children
        // then they are safe to delete.
        $toDelete = {};

        for ($ragdollRoot in $ragdollRoots)
        {
            $childNodes = `listRelatives -children $ragdollRoot`;
            if (size($childNodes)==0)
            {
                $toDelete[(size($toDelete))] = $ragdollRoot;
            }
        }

        if (size($toDelete))
            delete $toDelete;

    }

    // Delete the soft bodies.
    $softShapes = `ls -type "bulletSoftBodyShape"`;
    $toDelete = $softShapes;

    // remove solved meshes and restore original mesh shapes
	
    for ($sb in $softShapes)
    {
        $inputMesh = `listConnections -s true -d false -shapes true -type "mesh" $sb `;

	    // restore original shapes
		for ($ip in $inputMesh)
			setAttr ($ip + ".intermediateObject") false;

		// remove transform nodes for meshes where not solved under original
		$inputT = `listRelatives -p $inputMesh`;
        $solvedMesh = `listConnections -s false -d true -shapes true -type "mesh" $sb `;
		$solvedT = `listRelatives -p $solvedMesh`;

		$solvedT = `stringArrayRemove $inputT $solvedT`;

		if (size($solvedT))
			$toDelete[(size($toDelete))] = stringArrayToString($solvedT, ",");
		else
			$toDelete[(size($toDelete))] = stringArrayToString($solvedMesh, ",");
    }

    if (size($toDelete))
        delete $toDelete;

    // Remove the solver nodes.
    $bulletSolvers = `ls -type "bulletSolverShape"`;
    for ($bulletSolver in $bulletSolvers)
    {
        $solverParent = `listRelatives -p $bulletSolver`;
        if (`size $solverParent`)
            delete $solverParent;
    }
}
